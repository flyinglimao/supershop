schema {
  query: Query
  subscription: Subscription
}

"""
Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive.
"""
directive @entity on OBJECT

"""Defined a Subgraph ID for an object type"""
directive @subgraphId(id: String!) on OBJECT

"""
creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API.
"""
directive @derivedFrom(field: String!) on FIELD_DEFINITION

enum Aggregation_interval {
  hour
  day
}

scalar BigDecimal

scalar BigInt

input BlockChangedFilter {
  number_gte: Int!
}

input Block_height {
  hash: Bytes
  number: Int
  number_gte: Int
}

scalar Bytes

"""
8 bytes signed integer

"""
scalar Int8

type Item {
  id: String!
  itemId: BigInt!
  price: BigInt!
  store: Bytes!
  itemName: String!
  itemDescription: String!
  tags: [String!]!
  metadata: Bytes!
  active: Boolean!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

input Item_filter {
  id: String
  id_not: String
  id_gt: String
  id_lt: String
  id_gte: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_contains_nocase: String
  id_not_contains: String
  id_not_contains_nocase: String
  id_starts_with: String
  id_starts_with_nocase: String
  id_not_starts_with: String
  id_not_starts_with_nocase: String
  id_ends_with: String
  id_ends_with_nocase: String
  id_not_ends_with: String
  id_not_ends_with_nocase: String
  itemId: BigInt
  itemId_not: BigInt
  itemId_gt: BigInt
  itemId_lt: BigInt
  itemId_gte: BigInt
  itemId_lte: BigInt
  itemId_in: [BigInt!]
  itemId_not_in: [BigInt!]
  price: BigInt
  price_not: BigInt
  price_gt: BigInt
  price_lt: BigInt
  price_gte: BigInt
  price_lte: BigInt
  price_in: [BigInt!]
  price_not_in: [BigInt!]
  store: Bytes
  store_not: Bytes
  store_gt: Bytes
  store_lt: Bytes
  store_gte: Bytes
  store_lte: Bytes
  store_in: [Bytes!]
  store_not_in: [Bytes!]
  store_contains: Bytes
  store_not_contains: Bytes
  itemName: String
  itemName_not: String
  itemName_gt: String
  itemName_lt: String
  itemName_gte: String
  itemName_lte: String
  itemName_in: [String!]
  itemName_not_in: [String!]
  itemName_contains: String
  itemName_contains_nocase: String
  itemName_not_contains: String
  itemName_not_contains_nocase: String
  itemName_starts_with: String
  itemName_starts_with_nocase: String
  itemName_not_starts_with: String
  itemName_not_starts_with_nocase: String
  itemName_ends_with: String
  itemName_ends_with_nocase: String
  itemName_not_ends_with: String
  itemName_not_ends_with_nocase: String
  itemDescription: String
  itemDescription_not: String
  itemDescription_gt: String
  itemDescription_lt: String
  itemDescription_gte: String
  itemDescription_lte: String
  itemDescription_in: [String!]
  itemDescription_not_in: [String!]
  itemDescription_contains: String
  itemDescription_contains_nocase: String
  itemDescription_not_contains: String
  itemDescription_not_contains_nocase: String
  itemDescription_starts_with: String
  itemDescription_starts_with_nocase: String
  itemDescription_not_starts_with: String
  itemDescription_not_starts_with_nocase: String
  itemDescription_ends_with: String
  itemDescription_ends_with_nocase: String
  itemDescription_not_ends_with: String
  itemDescription_not_ends_with_nocase: String
  tags: [String!]
  tags_not: [String!]
  tags_contains: [String!]
  tags_contains_nocase: [String!]
  tags_not_contains: [String!]
  tags_not_contains_nocase: [String!]
  metadata: Bytes
  metadata_not: Bytes
  metadata_gt: Bytes
  metadata_lt: Bytes
  metadata_gte: Bytes
  metadata_lte: Bytes
  metadata_in: [Bytes!]
  metadata_not_in: [Bytes!]
  metadata_contains: Bytes
  metadata_not_contains: Bytes
  active: Boolean
  active_not: Boolean
  active_in: [Boolean!]
  active_not_in: [Boolean!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_lt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_not_in: [BigInt!]
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_gt: Bytes
  transactionHash_lt: Bytes
  transactionHash_gte: Bytes
  transactionHash_lte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Item_filter]
  or: [Item_filter]
}

enum Item_orderBy {
  id
  itemId
  price
  store
  itemName
  itemDescription
  tags
  metadata
  active
  blockNumber
  blockTimestamp
  transactionHash
}

"""Defines the order direction, either ascending or descending"""
enum OrderDirection {
  asc
  desc
}

type OwnershipTransferred {
  id: Bytes!
  previousOwner: Bytes!
  newOwner: Bytes!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

input OwnershipTransferred_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  previousOwner: Bytes
  previousOwner_not: Bytes
  previousOwner_gt: Bytes
  previousOwner_lt: Bytes
  previousOwner_gte: Bytes
  previousOwner_lte: Bytes
  previousOwner_in: [Bytes!]
  previousOwner_not_in: [Bytes!]
  previousOwner_contains: Bytes
  previousOwner_not_contains: Bytes
  newOwner: Bytes
  newOwner_not: Bytes
  newOwner_gt: Bytes
  newOwner_lt: Bytes
  newOwner_gte: Bytes
  newOwner_lte: Bytes
  newOwner_in: [Bytes!]
  newOwner_not_in: [Bytes!]
  newOwner_contains: Bytes
  newOwner_not_contains: Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_lt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_not_in: [BigInt!]
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_gt: Bytes
  transactionHash_lt: Bytes
  transactionHash_gte: Bytes
  transactionHash_lte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [OwnershipTransferred_filter]
  or: [OwnershipTransferred_filter]
}

enum OwnershipTransferred_orderBy {
  id
  previousOwner
  newOwner
  blockNumber
  blockTimestamp
  transactionHash
}

type Query {
  ownershipTransferred(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): OwnershipTransferred
  ownershipTransferreds(
    skip: Int = 0
    first: Int = 100
    orderBy: OwnershipTransferred_orderBy
    orderDirection: OrderDirection
    where: OwnershipTransferred_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [OwnershipTransferred!]!
  registerStoreEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): RegisterStoreEvent
  registerStoreEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: RegisterStoreEvent_orderBy
    orderDirection: OrderDirection
    where: RegisterStoreEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [RegisterStoreEvent!]!
  releaseItemEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ReleaseItemEvent
  releaseItemEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: ReleaseItemEvent_orderBy
    orderDirection: OrderDirection
    where: ReleaseItemEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ReleaseItemEvent!]!
  removeItemEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): RemoveItemEvent
  removeItemEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: RemoveItemEvent_orderBy
    orderDirection: OrderDirection
    where: RemoveItemEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [RemoveItemEvent!]!
  item(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Item
  items(
    skip: Int = 0
    first: Int = 100
    orderBy: Item_orderBy
    orderDirection: OrderDirection
    where: Item_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Item!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type RegisterStoreEvent {
  id: Bytes!
  store: Bytes!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

input RegisterStoreEvent_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  store: Bytes
  store_not: Bytes
  store_gt: Bytes
  store_lt: Bytes
  store_gte: Bytes
  store_lte: Bytes
  store_in: [Bytes!]
  store_not_in: [Bytes!]
  store_contains: Bytes
  store_not_contains: Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_lt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_not_in: [BigInt!]
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_gt: Bytes
  transactionHash_lt: Bytes
  transactionHash_gte: Bytes
  transactionHash_lte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [RegisterStoreEvent_filter]
  or: [RegisterStoreEvent_filter]
}

enum RegisterStoreEvent_orderBy {
  id
  store
  blockNumber
  blockTimestamp
  transactionHash
}

type ReleaseItemEvent {
  id: Bytes!
  itemId: BigInt!
  price: BigInt!
  store: Bytes!
  itemName: String!
  itemDescription: String!
  tags: [String!]!
  metadata: Bytes!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

input ReleaseItemEvent_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  itemId: BigInt
  itemId_not: BigInt
  itemId_gt: BigInt
  itemId_lt: BigInt
  itemId_gte: BigInt
  itemId_lte: BigInt
  itemId_in: [BigInt!]
  itemId_not_in: [BigInt!]
  price: BigInt
  price_not: BigInt
  price_gt: BigInt
  price_lt: BigInt
  price_gte: BigInt
  price_lte: BigInt
  price_in: [BigInt!]
  price_not_in: [BigInt!]
  store: Bytes
  store_not: Bytes
  store_gt: Bytes
  store_lt: Bytes
  store_gte: Bytes
  store_lte: Bytes
  store_in: [Bytes!]
  store_not_in: [Bytes!]
  store_contains: Bytes
  store_not_contains: Bytes
  itemName: String
  itemName_not: String
  itemName_gt: String
  itemName_lt: String
  itemName_gte: String
  itemName_lte: String
  itemName_in: [String!]
  itemName_not_in: [String!]
  itemName_contains: String
  itemName_contains_nocase: String
  itemName_not_contains: String
  itemName_not_contains_nocase: String
  itemName_starts_with: String
  itemName_starts_with_nocase: String
  itemName_not_starts_with: String
  itemName_not_starts_with_nocase: String
  itemName_ends_with: String
  itemName_ends_with_nocase: String
  itemName_not_ends_with: String
  itemName_not_ends_with_nocase: String
  itemDescription: String
  itemDescription_not: String
  itemDescription_gt: String
  itemDescription_lt: String
  itemDescription_gte: String
  itemDescription_lte: String
  itemDescription_in: [String!]
  itemDescription_not_in: [String!]
  itemDescription_contains: String
  itemDescription_contains_nocase: String
  itemDescription_not_contains: String
  itemDescription_not_contains_nocase: String
  itemDescription_starts_with: String
  itemDescription_starts_with_nocase: String
  itemDescription_not_starts_with: String
  itemDescription_not_starts_with_nocase: String
  itemDescription_ends_with: String
  itemDescription_ends_with_nocase: String
  itemDescription_not_ends_with: String
  itemDescription_not_ends_with_nocase: String
  tags: [String!]
  tags_not: [String!]
  tags_contains: [String!]
  tags_contains_nocase: [String!]
  tags_not_contains: [String!]
  tags_not_contains_nocase: [String!]
  metadata: Bytes
  metadata_not: Bytes
  metadata_gt: Bytes
  metadata_lt: Bytes
  metadata_gte: Bytes
  metadata_lte: Bytes
  metadata_in: [Bytes!]
  metadata_not_in: [Bytes!]
  metadata_contains: Bytes
  metadata_not_contains: Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_lt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_not_in: [BigInt!]
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_gt: Bytes
  transactionHash_lt: Bytes
  transactionHash_gte: Bytes
  transactionHash_lte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [ReleaseItemEvent_filter]
  or: [ReleaseItemEvent_filter]
}

enum ReleaseItemEvent_orderBy {
  id
  itemId
  price
  store
  itemName
  itemDescription
  tags
  metadata
  blockNumber
  blockTimestamp
  transactionHash
}

type RemoveItemEvent {
  id: Bytes!
  itemId: BigInt!
  store: Bytes!
  itemName: String!
  itemDescription: String!
  tags: [String!]!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

input RemoveItemEvent_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  itemId: BigInt
  itemId_not: BigInt
  itemId_gt: BigInt
  itemId_lt: BigInt
  itemId_gte: BigInt
  itemId_lte: BigInt
  itemId_in: [BigInt!]
  itemId_not_in: [BigInt!]
  store: Bytes
  store_not: Bytes
  store_gt: Bytes
  store_lt: Bytes
  store_gte: Bytes
  store_lte: Bytes
  store_in: [Bytes!]
  store_not_in: [Bytes!]
  store_contains: Bytes
  store_not_contains: Bytes
  itemName: String
  itemName_not: String
  itemName_gt: String
  itemName_lt: String
  itemName_gte: String
  itemName_lte: String
  itemName_in: [String!]
  itemName_not_in: [String!]
  itemName_contains: String
  itemName_contains_nocase: String
  itemName_not_contains: String
  itemName_not_contains_nocase: String
  itemName_starts_with: String
  itemName_starts_with_nocase: String
  itemName_not_starts_with: String
  itemName_not_starts_with_nocase: String
  itemName_ends_with: String
  itemName_ends_with_nocase: String
  itemName_not_ends_with: String
  itemName_not_ends_with_nocase: String
  itemDescription: String
  itemDescription_not: String
  itemDescription_gt: String
  itemDescription_lt: String
  itemDescription_gte: String
  itemDescription_lte: String
  itemDescription_in: [String!]
  itemDescription_not_in: [String!]
  itemDescription_contains: String
  itemDescription_contains_nocase: String
  itemDescription_not_contains: String
  itemDescription_not_contains_nocase: String
  itemDescription_starts_with: String
  itemDescription_starts_with_nocase: String
  itemDescription_not_starts_with: String
  itemDescription_not_starts_with_nocase: String
  itemDescription_ends_with: String
  itemDescription_ends_with_nocase: String
  itemDescription_not_ends_with: String
  itemDescription_not_ends_with_nocase: String
  tags: [String!]
  tags_not: [String!]
  tags_contains: [String!]
  tags_contains_nocase: [String!]
  tags_not_contains: [String!]
  tags_not_contains_nocase: [String!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_lt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_not_in: [BigInt!]
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_gt: Bytes
  transactionHash_lt: Bytes
  transactionHash_gte: Bytes
  transactionHash_lte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [RemoveItemEvent_filter]
  or: [RemoveItemEvent_filter]
}

enum RemoveItemEvent_orderBy {
  id
  itemId
  store
  itemName
  itemDescription
  tags
  blockNumber
  blockTimestamp
  transactionHash
}

type Subscription {
  ownershipTransferred(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): OwnershipTransferred
  ownershipTransferreds(
    skip: Int = 0
    first: Int = 100
    orderBy: OwnershipTransferred_orderBy
    orderDirection: OrderDirection
    where: OwnershipTransferred_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [OwnershipTransferred!]!
  registerStoreEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): RegisterStoreEvent
  registerStoreEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: RegisterStoreEvent_orderBy
    orderDirection: OrderDirection
    where: RegisterStoreEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [RegisterStoreEvent!]!
  releaseItemEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ReleaseItemEvent
  releaseItemEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: ReleaseItemEvent_orderBy
    orderDirection: OrderDirection
    where: ReleaseItemEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ReleaseItemEvent!]!
  removeItemEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): RemoveItemEvent
  removeItemEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: RemoveItemEvent_orderBy
    orderDirection: OrderDirection
    where: RemoveItemEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [RemoveItemEvent!]!
  item(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Item
  items(
    skip: Int = 0
    first: Int = 100
    orderBy: Item_orderBy
    orderDirection: OrderDirection
    where: Item_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Item!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

"""
A string representation of microseconds UNIX timestamp (16 digits)

"""
scalar Timestamp

type _Block_ {
  """The hash of the block"""
  hash: Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
  """The hash of the parent block"""
  parentHash: Bytes
}

"""The type for the top-level _meta field"""
type _Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: _Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}